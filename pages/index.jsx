import { Container } from "../components/Container";
import { useState } from "react";

import Link from "next/link";
export default function Home({ org }) {
 const [input, setInput] = useState("");
 const [loading, setLoading] = useState(false);
 const [error, setErrorMessage] = useState("");
 const [success, setSuccess] = useState(false);

 const handleSubmit = async (e) => {
  e.preventDefault();
  setLoading(true);
  setSuccess(false);
  setErrorMessage("");

  if (!input) {
   setErrorMessage("Please enter your username!");
   setLoading(false);
   return;
  }

  const res = await fetch("/api/invite", {
   body: JSON.stringify({
    username: input,
   }),
   headers: {
    "Content-Type": "application/json",
   },
   method: "POST",
  });
  const { message } = await res.json();
  if (res.status === 200) {
   setSuccess(true);
   setErrorMessage("");
  } else {
   setErrorMessage(message);
   setSuccess(false);
  }
  setLoading(false);
 };

 return (
  <Container title="Square Stack - Join">
   <div className="flex min-h-screen flex-col items-center justify-center bg-hero py-2 duration-200">
    <Link href={`https://github.com/` + org} className="text-2xl font-medium leading-tight tracking-tighter text-white">
     <div className="flex items-center justify-center gap-4 font-blont text-5xl">
      <svg className="animate-rotate" width="64" height="64" viewBox="0 0 167 162" fill="none" xmlns="http://www.w3.org/2000/svg">
       <path d="M107.251 0.442581C106.675 0.814203 96.0023 7.55584 96.0023 7.55584L124.813 24.6741C124.847 24.696 124.883 24.7193 124.922 24.7439L124.924 24.7455C125.373 25.0334 126.105 25.5025 126.461 26.0918C126.849 26.7327 126.98 27.5042 126.967 28.2358V73.635C126.967 73.7268 126.968 73.8186 126.968 73.9099C126.977 75.025 126.985 76.0914 125.723 76.8389L96.4827 94.4915L108.07 100.915C108.306 101.032 109.187 101.118 109.749 101.046C110.312 100.974 110.855 100.786 111.346 100.495L138.6 83.8533C139.143 83.4878 139.52 83.0678 139.788 82.5185C140.056 81.9693 140.102 81.4144 140.116 80.7427L140.329 20.3348C140.329 19.6892 140.24 19.0435 139.919 18.4859C139.598 17.9283 139.143 17.6157 138.539 17.2242C138.539 17.2242 110.659 0.814241 110.041 0.442581C109.424 0.0709205 109.205 -0.00479007 108.625 0.000227837C108.061 0.00511057 107.826 0.0709584 107.251 0.442581Z" fill="white" />
       <path d="M25.3152 20.2035C25.3499 20.8867 25.8623 33.4841 25.8623 33.4841L55.1193 17.1368C55.1552 17.1185 55.1935 17.0988 55.234 17.0779L55.2366 17.0765C55.7109 16.8323 56.4837 16.4344 57.1732 16.421C57.923 16.4065 58.658 16.6786 59.2861 17.0558L98.6733 39.7553C98.753 39.8013 98.8329 39.8466 98.9126 39.8917C99.8842 40.4419 100.813 40.9681 100.831 42.4325L101.526 76.5367L111.98 69.5404C112.2 69.3953 112.88 68.787 113.099 68.2644C113.318 67.7418 113.586 67.2394 113.578 66.6694L113.355 34.8085C113.31 34.1556 113.134 33.62 112.791 33.1138C112.448 32.6076 111.99 32.2902 111.414 31.9421L59.1122 1.55462C58.552 1.2318 57.9475 0.98565 57.3033 0.984182C56.6592 0.982714 56.1605 1.21962 55.5186 1.54645C55.5186 1.54645 27.3417 17.4432 26.7105 17.7911C26.0794 18.1389 25.904 18.2907 25.6186 18.7942C25.3409 19.2841 25.2805 19.5202 25.3152 20.2035Z" fill="white" />
       <path d="M1.3975 100.601C2.00763 100.913 13.193 106.769 13.193 106.769L13.6389 73.3031C13.641 73.2629 13.6431 73.2199 13.6452 73.1745L13.6454 73.1715C13.6706 72.6394 13.7118 71.7724 14.0449 71.1697C14.4072 70.5142 15.0108 70.0148 15.6521 69.6604L55.0393 46.9609C55.119 46.9149 55.1983 46.8685 55.2772 46.8222C56.2404 46.2574 57.1615 45.7172 58.4408 46.434L88.1553 62.682V49.6572C88.1394 49.3946 87.7733 48.5901 87.4293 48.1397C87.0854 47.6893 86.6514 47.3137 86.153 47.0352L58.0883 31.7957C57.4993 31.5083 56.9465 31.3926 56.3361 31.4358C55.7256 31.4789 55.2211 31.7163 54.6313 32.0399L2.11668 62.0603C1.55652 62.3831 1.0407 62.7826 0.717354 63.3387C0.394005 63.8949 0.350209 64.4444 0.312825 65.1627C0.312825 65.1627 0.0159614 97.4694 0.00220295 98.189C-0.0115555 98.9085 0.0324537 99.136 0.326563 99.6345C0.612748 100.119 0.787381 100.29 1.3975 100.601Z" fill="white" />
       <path d="M59.0957 161.557C59.6711 161.186 70.3441 154.444 70.3441 154.444L41.533 137.326C41.4993 137.304 41.463 137.281 41.4246 137.256L41.4221 137.255C40.9731 136.967 40.2415 136.498 39.8851 135.908C39.4976 135.267 39.3661 134.496 39.3794 133.764V88.365C39.3794 88.2732 39.3787 88.1814 39.378 88.0901C39.3696 86.975 39.3614 85.9086 40.623 85.1611L69.8637 67.5085L58.2767 61.0852C58.0409 60.9676 57.1599 60.8819 56.5971 60.954C56.0343 61.0261 55.4915 61.2135 55.0007 61.5051L27.7469 78.1467C27.2031 78.5122 26.8263 78.9322 26.5585 79.4815C26.2907 80.0307 26.2444 80.5856 26.2303 81.2573L26.0179 141.665C26.0179 142.311 26.1066 142.956 26.4274 143.514C26.7482 144.072 27.2031 144.384 27.8076 144.776C27.8076 144.776 55.6877 161.186 56.3051 161.557C56.9224 161.929 57.1418 162.005 57.7213 162C58.2852 161.995 58.5202 161.929 59.0957 161.557Z" fill="white" />
       <path d="M141.365 142.339C141.33 141.656 140.818 129.058 140.818 129.058L111.561 145.406C111.525 145.424 111.487 145.444 111.446 145.465L111.444 145.466C110.97 145.71 110.197 146.108 109.507 146.121C108.757 146.136 108.022 145.864 107.394 145.487L68.0071 122.787C67.9274 122.741 67.8475 122.696 67.7678 122.651C66.7962 122.101 65.867 121.574 65.8493 120.11L65.1546 86.0058L53.7884 92.8109C53.5685 92.9559 53.0536 93.6747 52.8348 94.1972C52.616 94.7198 52.5071 95.2828 52.5147 95.8528L53.3256 127.734C53.3708 128.387 53.5468 128.922 53.8895 129.429C54.2321 129.935 54.6904 130.252 55.266 130.6L107.568 160.988C108.128 161.311 108.733 161.557 109.377 161.558C110.021 161.56 110.52 161.323 111.162 160.996C111.162 160.996 139.339 145.099 139.97 144.751C140.601 144.404 140.776 144.252 141.062 143.748C141.339 143.258 141.4 143.022 141.365 142.339Z" fill="white" />
       <path d="M165.602 61.6221C164.992 61.3104 153.807 55.4547 153.807 55.4547L153.361 88.9203C153.359 88.9605 153.357 89.0035 153.355 89.049L153.355 89.0519C153.329 89.584 153.288 90.451 152.955 91.0537C152.593 91.7092 151.989 92.2086 151.348 92.563L111.961 115.263C111.881 115.309 111.802 115.355 111.723 115.401C110.76 115.966 109.838 116.506 108.559 115.789L78.6239 99.3378L78.8447 112.566C78.8606 112.829 79.2267 113.633 79.5707 114.084C79.9146 114.534 80.3486 114.91 80.847 115.188L108.912 130.428C109.501 130.715 110.053 130.831 110.664 130.788C111.274 130.745 111.779 130.507 112.369 130.184L164.883 100.163C165.443 99.8403 165.959 99.4408 166.283 98.8847C166.606 98.3286 166.65 97.779 166.687 97.0607C166.687 97.0607 166.984 64.754 166.998 64.0345C167.012 63.3149 166.968 63.0874 166.673 62.589C166.387 62.1039 166.213 61.9337 165.602 61.6221Z" fill="white" />
      </svg>
      <p>
       Square Stack<span className="ml-2 align-top text-xs font-normal tracking-wide">Beta</span>
      </p>
     </div>
    </Link>
    <p className="pt-6 text-center text-2xl text-white">
     Join the community of developers
     <br />
     who are building the future of the web.
    </p>
    <div className="pt-6">
     <form onSubmit={handleSubmit}>
      <label htmlFor="input" className="flex justify-center">
       <span className="sr-only">Github Username</span>
       <input
        id="input"
        type="name"
        autoFocus
        className={`${error ? "border-red-400 text-red-400 placeholder:text-red-400" : "border-white/15 "} rounded-lg border-2 !bg-transparent px-4 py-2 text-white outline-none duration-200 placeholder:text-white motion-reduce:transition-none`}
        placeholder="Enter your Github username"
        onChange={(e) => {
         setInput(e.target.value);
         setErrorMessage("");
        }}
       />
       <button className="ml-2 flex items-center justify-center rounded-lg bg-white px-4 py-2 text-black outline-none duration-200 hover:bg-white/80 motion-reduce:transition-none">{loading ? <div className="spinner inline-block h-6 w-6 animate-spin rounded-full border-2 text-black" role="status" /> : "Join us!"}</button>
      </label>
      <div className="flex flex-col items-center justify-center py-2">
       {error && <p className="text-red-400">{error}</p>}
       {success && <p className="text-green-500">Success! Check your email for an invite!</p>}
      </div>
     </form>
    </div>
   </div>
  </Container>
 );
}

export async function getServerSideProps(context) {
 return {
  props: {
   org: process.env.ORGANIZATION,
  },
 };
}
